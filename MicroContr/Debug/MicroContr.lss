
MicroContr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00000470  00000504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000470  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800192  00800192  00000596  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000596  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001162  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e6  00000000  00000000  000017fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b8  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000289c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f7  00000000  00000000  00002a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e0  00000000  00000000  00002f73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00003553  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e7       	ldi	r30, 0x70	; 112
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 39       	cpi	r26, 0x92	; 146
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e9       	ldi	r26, 0x92	; 146
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 39       	cpi	r26, 0x96	; 150
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	cd d1       	rcall	.+922    	; 0x45e <main>
  c4:	d3 c1       	rjmp	.+934    	; 0x46c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <wait>:
	writeToMatrix(smileys[8].data);


}
void smileyniet(void){
	writeToMatrix(smileys[16].data);
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	6c f4       	brge	.+26     	; 0xe8 <wait+0x20>
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	e9 ef       	ldi	r30, 0xF9	; 249
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <wait+0xe>
  da:	00 c0       	rjmp	.+0      	; 0xdc <wait+0x14>
  dc:	00 00       	nop
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	82 17       	cp	r24, r18
  e4:	93 07       	cpc	r25, r19
  e6:	a9 f7       	brne	.-22     	; 0xd2 <wait+0xa>
  e8:	08 95       	ret

000000ea <twi_init>:
  ea:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  ee:	80 e2       	ldi	r24, 0x20	; 32
  f0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  f4:	08 95       	ret

000000f6 <twi_start>:
  f6:	84 ea       	ldi	r24, 0xA4	; 164
  f8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  fc:	e4 e7       	ldi	r30, 0x74	; 116
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	88 23       	and	r24, r24
 104:	ec f7       	brge	.-6      	; 0x100 <twi_start+0xa>
 106:	08 95       	ret

00000108 <twi_tx>:
 108:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 10c:	84 e8       	ldi	r24, 0x84	; 132
 10e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 112:	e4 e7       	ldi	r30, 0x74	; 116
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	88 23       	and	r24, r24
 11a:	ec f7       	brge	.-6      	; 0x116 <twi_tx+0xe>
 11c:	08 95       	ret

0000011e <writeToMatrix>:
 11e:	ff 92       	push	r15
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	c0 e0       	ldi	r28, 0x00	; 0
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	04 e7       	ldi	r16, 0x74	; 116
 12e:	10 e0       	ldi	r17, 0x00	; 0
 130:	0f 2e       	mov	r0, r31
 132:	f4 e9       	ldi	r31, 0x94	; 148
 134:	ff 2e       	mov	r15, r31
 136:	f0 2d       	mov	r31, r0
 138:	de df       	rcall	.-68     	; 0xf6 <twi_start>
 13a:	80 ee       	ldi	r24, 0xE0	; 224
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	e4 df       	rcall	.-56     	; 0x108 <twi_tx>
 140:	ce 01       	movw	r24, r28
 142:	e2 df       	rcall	.-60     	; 0x108 <twi_tx>
 144:	ce 01       	movw	r24, r28
 146:	dd 23       	and	r29, r29
 148:	0c f4       	brge	.+2      	; 0x14c <writeToMatrix+0x2e>
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	95 95       	asr	r25
 14e:	87 95       	ror	r24
 150:	fc 01       	movw	r30, r24
 152:	e0 50       	subi	r30, 0x00	; 0
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	80 81       	ld	r24, Z
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	d6 df       	rcall	.-84     	; 0x108 <twi_tx>
 15c:	f8 01       	movw	r30, r16
 15e:	f0 82       	st	Z, r15
 160:	22 96       	adiw	r28, 0x02	; 2
 162:	c0 31       	cpi	r28, 0x10	; 16
 164:	d1 05       	cpc	r29, r1
 166:	41 f7       	brne	.-48     	; 0x138 <writeToMatrix+0x1a>
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	ff 90       	pop	r15
 172:	08 95       	ret

00000174 <smileyHappy>:
 174:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 178:	d2 cf       	rjmp	.-92     	; 0x11e <writeToMatrix>
 17a:	08 95       	ret

0000017c <smileyneut>:
 17c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_start+0x8>
 180:	ce cf       	rjmp	.-100    	; 0x11e <writeToMatrix>
 182:	08 95       	ret

00000184 <LiftStart>:
		case 8: smileyHappy(); break;
		case 16: smileyneut(); break;
	}
}

void LiftStart(void){
 184:	cf 92       	push	r12
 186:	df 92       	push	r13
 188:	ff 92       	push	r15
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	05 e5       	ldi	r16, 0x55	; 85
 194:	11 e0       	ldi	r17, 0x01	; 1
	int x = 0;
	for (int adres = 0; adres <= 14; adres += 2)
 196:	c0 e0       	ldi	r28, 0x00	; 0
 198:	d0 e0       	ldi	r29, 0x00	; 0
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 19a:	0f 2e       	mov	r0, r31
 19c:	f4 e7       	ldi	r31, 0x74	; 116
 19e:	cf 2e       	mov	r12, r31
 1a0:	d1 2c       	mov	r13, r1
 1a2:	f0 2d       	mov	r31, r0
 1a4:	0f 2e       	mov	r0, r31
 1a6:	f4 e9       	ldi	r31, 0x94	; 148
 1a8:	ff 2e       	mov	r15, r31
 1aa:	f0 2d       	mov	r31, r0

void LiftStart(void){
	int x = 0;
	for (int adres = 0; adres <= 14; adres += 2)
	{
		twi_start();
 1ac:	a4 df       	rcall	.-184    	; 0xf6 <twi_start>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 1ae:	80 ee       	ldi	r24, 0xE0	; 224
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	aa df       	rcall	.-172    	; 0x108 <twi_tx>
		twi_tx(adres);	// Address
 1b4:	ce 01       	movw	r24, r28
 1b6:	a8 df       	rcall	.-176    	; 0x108 <twi_tx>
 1b8:	f8 01       	movw	r30, r16
		twi_tx(liftup[x].data);	// data
 1ba:	81 91       	ld	r24, Z+
 1bc:	8f 01       	movw	r16, r30
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	a3 df       	rcall	.-186    	; 0x108 <twi_tx>
 1c2:	f6 01       	movw	r30, r12
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 1c4:	f0 82       	st	Z, r15
 1c6:	22 96       	adiw	r28, 0x02	; 2
	}
}

void LiftStart(void){
	int x = 0;
	for (int adres = 0; adres <= 14; adres += 2)
 1c8:	c0 31       	cpi	r28, 0x10	; 16
 1ca:	d1 05       	cpc	r29, r1
 1cc:	79 f7       	brne	.-34     	; 0x1ac <LiftStart+0x28>
 1ce:	df 91       	pop	r29
		twi_stop();
		x++;
	}
	
	
}
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	df 90       	pop	r13
 1da:	cf 90       	pop	r12
 1dc:	08 95       	ret

000001de <clearmatrix>:
 1de:	ef 92       	push	r14

void clearmatrix(void){
 1e0:	ff 92       	push	r15
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
	for (int adres = 0; adres <= 14; adres += 2)
 1e8:	c0 e0       	ldi	r28, 0x00	; 0
 1ea:	d0 e0       	ldi	r29, 0x00	; 0
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 1ec:	0f 2e       	mov	r0, r31
 1ee:	f4 e7       	ldi	r31, 0x74	; 116
 1f0:	ef 2e       	mov	r14, r31
 1f2:	f1 2c       	mov	r15, r1
 1f4:	f0 2d       	mov	r31, r0
 1f6:	14 e9       	ldi	r17, 0x94	; 148
}

void clearmatrix(void){
	for (int adres = 0; adres <= 14; adres += 2)
	{
		twi_start();
 1f8:	7e df       	rcall	.-260    	; 0xf6 <twi_start>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 1fa:	80 ee       	ldi	r24, 0xE0	; 224
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	84 df       	rcall	.-248    	; 0x108 <twi_tx>
		twi_tx(adres);	// Address
 200:	ce 01       	movw	r24, r28
 202:	82 df       	rcall	.-252    	; 0x108 <twi_tx>
		twi_tx(0);	// data
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	7f df       	rcall	.-258    	; 0x108 <twi_tx>
 20a:	f7 01       	movw	r30, r14
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 20c:	10 83       	st	Z, r17
 20e:	22 96       	adiw	r28, 0x02	; 2
	
	
}

void clearmatrix(void){
	for (int adres = 0; adres <= 14; adres += 2)
 210:	c0 31       	cpi	r28, 0x10	; 16
 212:	d1 05       	cpc	r29, r1
 214:	89 f7       	brne	.-30     	; 0x1f8 <clearmatrix+0x1a>
 216:	df 91       	pop	r29
		twi_tx(0xE0);	// Display I2C addres + R/W bit
		twi_tx(adres);	// Address
		twi_tx(0);	// data
		twi_stop();
	}
}
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	ff 90       	pop	r15
 21e:	ef 90       	pop	r14
 220:	08 95       	ret

00000222 <Liftup>:
 222:	bf 92       	push	r11
void Liftup(int desti){
 224:	cf 92       	push	r12
 226:	df 92       	push	r13
 228:	ef 92       	push	r14
 22a:	ff 92       	push	r15
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
	PORTA = place; 
 234:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <place>
 238:	2b bb       	out	0x1b, r18	; 27
	if (place > 50)
 23a:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <place>
 23e:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <place+0x1>
 242:	23 33       	cpi	r18, 0x33	; 51
 244:	31 05       	cpc	r19, r1
 246:	0c f0       	brlt	.+2      	; 0x24a <Liftup+0x28>
 248:	4c c0       	rjmp	.+152    	; 0x2e2 <Liftup+0xc0>
		return;
		
	if (lastScrollAction == 2){
 24a:	40 91 92 01 	lds	r20, 0x0192	; 0x800192 <__data_end>
 24e:	50 91 93 01 	lds	r21, 0x0193	; 0x800193 <__data_end+0x1>
 252:	42 30       	cpi	r20, 0x02	; 2
 254:	51 05       	cpc	r21, r1
 256:	31 f4       	brne	.+12     	; 0x264 <Liftup+0x42>
		place--;
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	31 09       	sbc	r19, r1
 25c:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <place+0x1>
 260:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <place>
	}
		
	
	for (place; place <= desti; place++)
 264:	00 91 94 01 	lds	r16, 0x0194	; 0x800194 <place>
 268:	10 91 95 01 	lds	r17, 0x0195	; 0x800195 <place+0x1>
 26c:	80 17       	cp	r24, r16
 26e:	91 07       	cpc	r25, r17
 270:	1c f5       	brge	.+70     	; 0x2b8 <Liftup+0x96>
 272:	31 c0       	rjmp	.+98     	; 0x2d6 <Liftup+0xb4>
	{
		int x = place;
		for (int adres = 0; adres <= 14; adres += 2)
		{
			twi_start();
 274:	40 df       	rcall	.-384    	; 0xf6 <twi_start>
			twi_tx(0xE0);	// Display I2C addres + R/W bit
 276:	80 ee       	ldi	r24, 0xE0	; 224
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	46 df       	rcall	.-372    	; 0x108 <twi_tx>
			twi_tx(adres);	// Address
 27c:	ce 01       	movw	r24, r28
 27e:	44 df       	rcall	.-376    	; 0x108 <twi_tx>
 280:	f8 01       	movw	r30, r16
			twi_tx(liftup[x].data);	// data
 282:	81 91       	ld	r24, Z+
 284:	8f 01       	movw	r16, r30
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	3f df       	rcall	.-386    	; 0x108 <twi_tx>
 28a:	f7 01       	movw	r30, r14
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 28c:	b0 82       	st	Z, r11
 28e:	22 96       	adiw	r28, 0x02	; 2
		
	
	for (place; place <= desti; place++)
	{
		int x = place;
		for (int adres = 0; adres <= 14; adres += 2)
 290:	c0 31       	cpi	r28, 0x10	; 16
 292:	d1 05       	cpc	r29, r1
 294:	79 f7       	brne	.-34     	; 0x274 <Liftup+0x52>
			twi_tx(adres);	// Address
			twi_tx(liftup[x].data);	// data
			twi_stop();
			x++;
		}
		wait(1250);
 296:	82 ee       	ldi	r24, 0xE2	; 226
 298:	94 e0       	ldi	r25, 0x04	; 4
 29a:	16 df       	rcall	.-468    	; 0xc8 <wait>
 29c:	00 91 94 01 	lds	r16, 0x0194	; 0x800194 <place>
	if (lastScrollAction == 2){
		place--;
	}
		
	
	for (place; place <= desti; place++)
 2a0:	10 91 95 01 	lds	r17, 0x0195	; 0x800195 <place+0x1>
 2a4:	0f 5f       	subi	r16, 0xFF	; 255
 2a6:	1f 4f       	sbci	r17, 0xFF	; 255
 2a8:	10 93 95 01 	sts	0x0195, r17	; 0x800195 <place+0x1>
 2ac:	00 93 94 01 	sts	0x0194, r16	; 0x800194 <place>
 2b0:	c0 16       	cp	r12, r16
 2b2:	d1 06       	cpc	r13, r17
 2b4:	5c f4       	brge	.+22     	; 0x2cc <Liftup+0xaa>
 2b6:	0f c0       	rjmp	.+30     	; 0x2d6 <Liftup+0xb4>
 2b8:	6c 01       	movw	r12, r24
 2ba:	0f 2e       	mov	r0, r31
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 2bc:	f4 e7       	ldi	r31, 0x74	; 116
 2be:	ef 2e       	mov	r14, r31
 2c0:	f1 2c       	mov	r15, r1
 2c2:	f0 2d       	mov	r31, r0
 2c4:	0f 2e       	mov	r0, r31
 2c6:	f4 e9       	ldi	r31, 0x94	; 148
 2c8:	bf 2e       	mov	r11, r31
 2ca:	f0 2d       	mov	r31, r0
 2cc:	0b 5a       	subi	r16, 0xAB	; 171
 2ce:	1e 4f       	sbci	r17, 0xFE	; 254
 2d0:	c0 e0       	ldi	r28, 0x00	; 0
		twi_tx(adres);	// Address
		twi_tx(0);	// data
		twi_stop();
	}
}
void Liftup(int desti){
 2d2:	d0 e0       	ldi	r29, 0x00	; 0
 2d4:	cf cf       	rjmp	.-98     	; 0x274 <Liftup+0x52>
 2d6:	81 e0       	ldi	r24, 0x01	; 1
		wait(1250);
	}
	

		
	lastScrollAction = 1;
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
 2de:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 2e2:	df 91       	pop	r29
	

}
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	ff 90       	pop	r15
 2ec:	ef 90       	pop	r14
 2ee:	df 90       	pop	r13
 2f0:	cf 90       	pop	r12
 2f2:	bf 90       	pop	r11
 2f4:	08 95       	ret

000002f6 <Liftdown>:
 2f6:	bf 92       	push	r11

void Liftdown(int desti){
 2f8:	cf 92       	push	r12
 2fa:	df 92       	push	r13
 2fc:	ef 92       	push	r14
 2fe:	ff 92       	push	r15
 300:	0f 93       	push	r16
 302:	1f 93       	push	r17
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
	if (place < 1)
 308:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <place>
 30c:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <place+0x1>
 310:	12 16       	cp	r1, r18
 312:	13 06       	cpc	r1, r19
 314:	0c f0       	brlt	.+2      	; 0x318 <Liftdown+0x22>
 316:	4c c0       	rjmp	.+152    	; 0x3b0 <Liftdown+0xba>
		return;
		
	if (lastScrollAction == 1){
 318:	40 91 92 01 	lds	r20, 0x0192	; 0x800192 <__data_end>
 31c:	50 91 93 01 	lds	r21, 0x0193	; 0x800193 <__data_end+0x1>
 320:	41 30       	cpi	r20, 0x01	; 1
 322:	51 05       	cpc	r21, r1
 324:	31 f4       	brne	.+12     	; 0x332 <Liftdown+0x3c>
		place++;
 326:	2f 5f       	subi	r18, 0xFF	; 255
 328:	3f 4f       	sbci	r19, 0xFF	; 255
 32a:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <place+0x1>
 32e:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <place>
	}
		
		
	for (place; place >= desti; place--)
 332:	00 91 94 01 	lds	r16, 0x0194	; 0x800194 <place>
 336:	10 91 95 01 	lds	r17, 0x0195	; 0x800195 <place+0x1>
 33a:	08 17       	cp	r16, r24
 33c:	19 07       	cpc	r17, r25
 33e:	1c f5       	brge	.+70     	; 0x386 <Liftdown+0x90>
 340:	31 c0       	rjmp	.+98     	; 0x3a4 <Liftdown+0xae>
	{
		int x=place;
		for (int adres = 0; adres <= 14; adres += 2)
		{
			twi_start();
 342:	d9 de       	rcall	.-590    	; 0xf6 <twi_start>
			twi_tx(0xE0);	// Display I2C addres + R/W bit
 344:	80 ee       	ldi	r24, 0xE0	; 224
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	df de       	rcall	.-578    	; 0x108 <twi_tx>
			twi_tx(adres);	// Address
 34a:	ce 01       	movw	r24, r28
 34c:	dd de       	rcall	.-582    	; 0x108 <twi_tx>
 34e:	f8 01       	movw	r30, r16
			twi_tx(liftdown[x - 1].data);	// data
 350:	81 91       	ld	r24, Z+
 352:	8f 01       	movw	r16, r30
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	d8 de       	rcall	.-592    	; 0x108 <twi_tx>
 358:	f7 01       	movw	r30, r14
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 35a:	b0 82       	st	Z, r11
 35c:	22 96       	adiw	r28, 0x02	; 2
		
		
	for (place; place >= desti; place--)
	{
		int x=place;
		for (int adres = 0; adres <= 14; adres += 2)
 35e:	c0 31       	cpi	r28, 0x10	; 16
 360:	d1 05       	cpc	r29, r1
 362:	79 f7       	brne	.-34     	; 0x342 <Liftdown+0x4c>
			twi_tx(adres);	// Address
			twi_tx(liftdown[x - 1].data);	// data
			twi_stop();
			x++;
		}
		wait(1250);
 364:	82 ee       	ldi	r24, 0xE2	; 226
 366:	94 e0       	ldi	r25, 0x04	; 4
 368:	af de       	rcall	.-674    	; 0xc8 <wait>
 36a:	00 91 94 01 	lds	r16, 0x0194	; 0x800194 <place>
	if (lastScrollAction == 1){
		place++;
	}
		
		
	for (place; place >= desti; place--)
 36e:	10 91 95 01 	lds	r17, 0x0195	; 0x800195 <place+0x1>
 372:	01 50       	subi	r16, 0x01	; 1
 374:	11 09       	sbc	r17, r1
 376:	10 93 95 01 	sts	0x0195, r17	; 0x800195 <place+0x1>
 37a:	00 93 94 01 	sts	0x0194, r16	; 0x800194 <place>
 37e:	0c 15       	cp	r16, r12
 380:	1d 05       	cpc	r17, r13
 382:	5c f4       	brge	.+22     	; 0x39a <Liftdown+0xa4>
 384:	0f c0       	rjmp	.+30     	; 0x3a4 <Liftdown+0xae>
 386:	6c 01       	movw	r12, r24
 388:	0f 2e       	mov	r0, r31
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 38a:	f4 e7       	ldi	r31, 0x74	; 116
 38c:	ef 2e       	mov	r14, r31
 38e:	f1 2c       	mov	r15, r1
 390:	f0 2d       	mov	r31, r0
 392:	0f 2e       	mov	r0, r31
 394:	f4 e9       	ldi	r31, 0x94	; 148
 396:	bf 2e       	mov	r11, r31
 398:	f0 2d       	mov	r31, r0
 39a:	09 5e       	subi	r16, 0xE9	; 233
 39c:	1e 4f       	sbci	r17, 0xFE	; 254
 39e:	c0 e0       	ldi	r28, 0x00	; 0
	lastScrollAction = 1;
	

}

void Liftdown(int desti){
 3a0:	d0 e0       	ldi	r29, 0x00	; 0
 3a2:	cf cf       	rjmp	.-98     	; 0x342 <Liftdown+0x4c>
 3a4:	82 e0       	ldi	r24, 0x02	; 2
		wait(1250);
	}
	

	
	lastScrollAction = 2;
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
 3ac:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 3b0:	df 91       	pop	r29
	
	
}
 3b2:	cf 91       	pop	r28
 3b4:	1f 91       	pop	r17
 3b6:	0f 91       	pop	r16
 3b8:	ff 90       	pop	r15
 3ba:	ef 90       	pop	r14
 3bc:	df 90       	pop	r13
 3be:	cf 90       	pop	r12
 3c0:	bf 90       	pop	r11
 3c2:	08 95       	ret

000003c4 <buttoncheck>:
 3c4:	89 b3       	in	r24, 0x19	; 25

void buttoncheck(){

	int num = PINA;

	switch (num){
 3c6:	84 30       	cpi	r24, 0x04	; 4
 3c8:	c9 f0       	breq	.+50     	; 0x3fc <buttoncheck+0x38>
 3ca:	28 f4       	brcc	.+10     	; 0x3d6 <buttoncheck+0x12>
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	41 f0       	breq	.+16     	; 0x3e0 <buttoncheck+0x1c>
 3d0:	82 30       	cpi	r24, 0x02	; 2
 3d2:	69 f0       	breq	.+26     	; 0x3ee <buttoncheck+0x2a>
 3d4:	08 95       	ret
 3d6:	88 30       	cpi	r24, 0x08	; 8
 3d8:	99 f0       	breq	.+38     	; 0x400 <__LOCK_REGION_LENGTH__>
 3da:	80 31       	cpi	r24, 0x10	; 16
 3dc:	99 f0       	breq	.+38     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3de:	08 95       	ret
		case 1: Liftup(place + 17); break;
 3e0:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <place>
 3e4:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <place+0x1>
 3e8:	41 96       	adiw	r24, 0x11	; 17
 3ea:	1b cf       	rjmp	.-458    	; 0x222 <Liftup>
 3ec:	08 95       	ret
		case 2: Liftdown(place - 17); break;
 3ee:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <place>
 3f2:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <place+0x1>
 3f6:	41 97       	sbiw	r24, 0x11	; 17
 3f8:	7e cf       	rjmp	.-260    	; 0x2f6 <Liftdown>
		case 4: clearmatrix(); break;
 3fa:	08 95       	ret
 3fc:	f0 ce       	rjmp	.-544    	; 0x1de <clearmatrix>
		case 8: smileyHappy(); break;
 3fe:	08 95       	ret
 400:	b9 ce       	rjmp	.-654    	; 0x174 <smileyHappy>
 402:	08 95       	ret
		case 16: smileyneut(); break;
 404:	bb ce       	rjmp	.-650    	; 0x17c <smileyneut>
 406:	08 95       	ret

00000408 <initall>:
 408:	1f 93       	push	r17
	
}



void initall(){
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
	twi_init();		// Init TWI interface
 40e:	6d de       	rcall	.-806    	; 0xea <twi_init>

	// Init HT16K22.
	twi_start();
 410:	72 de       	rcall	.-796    	; 0xf6 <twi_start>
 412:	80 ee       	ldi	r24, 0xE0	; 224
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	78 de       	rcall	.-784    	; 0x108 <twi_tx>
 418:	81 e2       	ldi	r24, 0x21	; 33
	twi_tx(0x21);	// Internal osc on
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	75 de       	rcall	.-790    	; 0x108 <twi_tx>
 41e:	c4 e7       	ldi	r28, 0x74	; 116
 420:	d0 e0       	ldi	r29, 0x00	; 0
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 422:	14 e9       	ldi	r17, 0x94	; 148
 424:	18 83       	st	Y, r17
 426:	67 de       	rcall	.-818    	; 0xf6 <twi_start>
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on
	twi_stop();

	twi_start();
 428:	80 ee       	ldi	r24, 0xE0	; 224
 42a:	90 e0       	ldi	r25, 0x00	; 0
	twi_tx(0xE0);	// Display I2C address + R/W bit
 42c:	6d de       	rcall	.-806    	; 0x108 <twi_tx>
 42e:	80 ea       	ldi	r24, 0xA0	; 160
	twi_tx(0xA0);	// HT16K33 pins all output
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	6a de       	rcall	.-812    	; 0x108 <twi_tx>
 434:	18 83       	st	Y, r17
	twi_stop();

	twi_start();
 436:	5f de       	rcall	.-834    	; 0xf6 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 438:	80 ee       	ldi	r24, 0xE0	; 224
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	65 de       	rcall	.-822    	; 0x108 <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 43e:	83 ee       	ldi	r24, 0xE3	; 227
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	62 de       	rcall	.-828    	; 0x108 <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 444:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();

	twi_start();
 446:	57 de       	rcall	.-850    	; 0xf6 <twi_start>
 448:	80 ee       	ldi	r24, 0xE0	; 224
	twi_tx(0xE0);	// Display I2C address + R/W bit
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	5d de       	rcall	.-838    	; 0x108 <twi_tx>
 44e:	81 e8       	ldi	r24, 0x81	; 129
 450:	90 e0       	ldi	r25, 0x00	; 0
	twi_tx(0x81);	// Display OFF - Blink On
 452:	5a de       	rcall	.-844    	; 0x108 <twi_tx>
 454:	18 83       	st	Y, r17
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 45a:	1f 91       	pop	r17

	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();
}
 45c:	08 95       	ret

0000045e <main>:
 45e:	8f ef       	ldi	r24, 0xFF	; 255
 460:	81 bb       	out	0x11, r24	; 17
 462:	84 bb       	out	0x14, r24	; 20
int main( void )
{
	DDRD = 0b11111111;
	DDRC = 0xFF;
	
	initall();
 464:	d1 df       	rcall	.-94     	; 0x408 <initall>
			
	LiftStart();
 466:	8e de       	rcall	.-740    	; 0x184 <LiftStart>
			
	while (1)
	{
		buttoncheck();
 468:	ad df       	rcall	.-166    	; 0x3c4 <buttoncheck>
 46a:	fe cf       	rjmp	.-4      	; 0x468 <main+0xa>

0000046c <_exit>:
 46c:	f8 94       	cli

0000046e <__stop_program>:
 46e:	ff cf       	rjmp	.-2      	; 0x46e <__stop_program>
